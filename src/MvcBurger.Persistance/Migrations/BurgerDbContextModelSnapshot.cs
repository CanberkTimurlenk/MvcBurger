// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MvcBurger.Persistance.Contexts;

#nullable disable

namespace MvcBurger.Persistance.Migrations
{
    [DbContext(typeof(BurgerDbContext))]
    partial class BurgerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MvcBurger.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.Drink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Drinks");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.ExtraIngredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("ExtraIngredients");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.MenuOrderExtraIngredient", b =>
                {
                    b.Property<Guid>("ExtraIngredientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExtraIngredientId", "MenuOrderId");

                    b.HasIndex("MenuOrderId");

                    b.ToTable("MenuOrderExtraIngredient");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DrinkId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DrinkId");

                    b.HasIndex("MenuId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.Sauce", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sauces");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.SauceOrder", b =>
                {
                    b.Property<Guid>("SauceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SauceId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("SauceOrders");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.MenuOrderExtraIngredient", b =>
                {
                    b.HasOne("MvcBurger.Domain.Entities.ExtraIngredient", "ExtraIngredient")
                        .WithMany("MenuOrderExtraIngredient")
                        .HasForeignKey("ExtraIngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MvcBurger.Domain.Entities.OrderItem", "MenuOrder")
                        .WithMany("MenuOrderExtraIngredient")
                        .HasForeignKey("MenuOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExtraIngredient");

                    b.Navigation("MenuOrder");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.Order", b =>
                {
                    b.HasOne("MvcBurger.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("MvcBurger.Domain.Entities.Drink", "Drink")
                        .WithMany("MenuOrder")
                        .HasForeignKey("DrinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MvcBurger.Domain.Entities.Menu", "Menu")
                        .WithMany("MenuOrder")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MvcBurger.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Drink");

                    b.Navigation("Menu");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.SauceOrder", b =>
                {
                    b.HasOne("MvcBurger.Domain.Entities.Order", "Order")
                        .WithMany("SauceOrder")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MvcBurger.Domain.Entities.Sauce", "Sauce")
                        .WithMany("SauceOrder")
                        .HasForeignKey("SauceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Sauce");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.Drink", b =>
                {
                    b.Navigation("MenuOrder");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.ExtraIngredient", b =>
                {
                    b.Navigation("MenuOrderExtraIngredient");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.Menu", b =>
                {
                    b.Navigation("MenuOrder");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("SauceOrder");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.OrderItem", b =>
                {
                    b.Navigation("MenuOrderExtraIngredient");
                });

            modelBuilder.Entity("MvcBurger.Domain.Entities.Sauce", b =>
                {
                    b.Navigation("SauceOrder");
                });
#pragma warning restore 612, 618
        }
    }
}
